#!/usr/bin/env python3

"""Reads an iXBRL file on input, and outputs a JSON representation.
Two representations are supported: flat: outputs a list of contexts and
values; hierarchy: embeds contexts in related context which introduces a
natural grouping structure to related contexts.
"""

import datetime
from lxml import etree as ET
import sys
import argparse
import json

from ixbrl_parse.ixbrl import parse, Measure, Divide

maxwidth=40

XBRLDI_NS = "http://xbrl.org/2006/xbrldi"
XBRL_NS = "http://www.xbrl.org/2003/instance"
XLINK_NS = "http://www.w3.org/1999/xlink"
LINK_NS = "http://www.xbrl.org/2003/linkbase"

parser = argparse.ArgumentParser(
    description=__doc__
)
parser.add_argument('--input', '-i',
                    required=True,
                    help='Input computations file')

# Parse arguments
args = parser.parse_args(sys.argv[1:])

tree = ET.parse(args.input)

i = parse(tree)

root_elt = ET.Element("{%s}xbrl" % XBRL_NS)

for schema in i.schemas:
    ref_elt = ET.SubElement(root_elt, "{%s}schemaRef" % LINK_NS)
    ref_elt.set(ET.QName(XLINK_NS, "href"), schema)
    ref_elt.set(ET.QName(XLINK_NS, "type"), "simple")

for cid, c in i.contexts.items():

    c_elt = ET.SubElement(root_elt, "{%s}context" % XBRL_NS)

    if c.entity:
        e_elt = ET.SubElement(c_elt, "{%s}entity" % XBRL_NS)
        i_elt = ET.SubElement(e_elt, "{%s}identifier" % XBRL_NS)
        i_elt.set("scheme", c.entity.scheme)
        i_elt.text = str(c.entity.id)

        if len(c.dimensions) > 0:
            seg_elt = ET.SubElement(e_elt, "{%s}segment" % XBRL_NS)
            for dim in c.dimensions:
                mem_elt = ET.SubElement(seg_elt,
                                        "{%s}explicitMember" % XBRLDI_NS)
                mem_elt.set("dimension", dim.dimension)
                mem_elt.text = dim.value

    if c.instant:
        p_elt = ET.SubElement(c_elt, "{%s}period" % XBRL_NS)
        inst_elt = ET.SubElement(p_elt, "{%s}instant" % XBRL_NS)
        inst_elt.text = str(c.instant.instant)

    if c.period:
        p_elt = ET.SubElement(c_elt, "{%s}period" % XBRL_NS)
        ET.SubElement(
            p_elt, "{%s}startDate" % XBRL_NS
        ).text = str(c.period.start)
        ET.SubElement(p_elt, "{%s}endDate" % XBRL_NS).text = str(c.period.end)

    c_elt.set("id", cid)

for u in i.units.values():
    u_elt = ET.SubElement(root_elt, "{%s}unit" % XBRL_NS)
    u_elt.set("id", u.id)
    if isinstance(u, Measure):
        ET.SubElement(u_elt, "{%s}measure" % XBRL_NS).text = u.measure
    elif isinstance(u, Divide):
        div_elt = ET.SubElement(u_elt, "{%s}divide" % XBRL_NS)
        ET.SubElement(
            ET.SubElement(div_elt, "{%s}unitNumerator" % XBRL_NS), "measure"
        ).text = u.num.measure
        ET.SubElement(
            ET.SubElement(div_elt, "{%s}unitDenominator" % XBRL_NS), "measure"
        ).text = u.den.measure

for v in i.values.values():
    v_elt = ET.SubElement(root_elt, v.name)
    v_elt.set("contextRef", v.context.id)
    v_elt.text = str(v.to_value().get_value())

    if hasattr(v, "decimals") and v.decimals:
        v_elt.set("decimals", str(v.decimals))

    if hasattr(v, "unit") and v.unit:
        v_elt.set("unitRef", v.unit.id)

enc = ET.tostring(root_elt, pretty_print=True)
print(enc.decode("utf-8"))

